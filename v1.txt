import tkinter as tk
from tkinter import ttk
import ttkbootstrap as tb
import os
import json

class DoItApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Do it!")
        self.root.geometry("400x500")
        self.style = tb.Style("superhero")  # You can change theme

        self.task_file = "tasks.json"

        self.task_frame = ttk.Frame(self.root, padding=10)
        self.task_frame.pack(fill="both", expand=True)

        self.entry = ttk.Entry(self.root, font=("Segoe UI", 12))
        self.entry.pack(pady=10, padx=10, fill="x")
        self.entry.bind("<Return>", self.add_task)

        self.load_tasks()

    def add_task(self, event=None):
        task_text = self.entry.get().strip()
        if task_text == "":
            return

        self.create_task(task_text)
        self.save_task(task_text)
        self.entry.delete(0, tk.END)

    def create_task(self, task_text):
        task_container = ttk.Frame(self.task_frame, style="default.TFrame", height=30)
        task_container.pack(fill="x", pady=5)

        label = ttk.Label(task_container, text=task_text, font=("Segoe UI", 11))
        label.pack(side="left", padx=5)

        tick_btn = ttk.Button(task_container, text="✅", width=3,
                              command=lambda: self.remove_task(task_container, task_text, "green"))
        tick_btn.pack(side="right", padx=2)

        cross_btn = ttk.Button(task_container, text="❌", width=3,
                               command=lambda: self.remove_task(task_container, task_text, "red"))
        cross_btn.pack(side="right", padx=2)

    def remove_task(self, task_widget, task_text, color):
        self.delete_task(task_text)

        colors = {
            "green": "#28a745",
            "red": "#dc3545"
        }

        style_name = f"{color}.TFrame"
        if not self.style.lookup(style_name, "background"):
            self.style.configure(style_name, background=colors[color])

        task_widget.configure(style=style_name)

        def slide_out(height=30):
            if height <= 0:
                task_widget.destroy()
                return
            task_widget.configure(height=height)
            task_widget.pack_configure(ipady=height // 5)
            task_widget.after(20, lambda: slide_out(height - 2))

        slide_out()

    def save_task(self, task_text):
        tasks = []
        if os.path.exists(self.task_file):
            with open(self.task_file, "r") as f:
                tasks = json.load(f)
        tasks.append(task_text)
        with open(self.task_file, "w") as f:
            json.dump(tasks, f)

    def delete_task(self, task_text):
        if not os.path.exists(self.task_file):
            return
        with open(self.task_file, "r") as f:
            tasks = json.load(f)
        if task_text in tasks:
            tasks.remove(task_text)
        with open(self.task_file, "w") as f:
            json.dump(tasks, f)

    def load_tasks(self):
        if os.path.exists(self.task_file):
            with open(self.task_file, "r") as f:
                tasks = json.load(f)
            for task_text in tasks:
                self.create_task(task_text)


if __name__ == "__main__":
    root = tb.Window(themename="superhero")
    app = DoItApp(root)
    root.mainloop()
